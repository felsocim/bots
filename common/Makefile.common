##############################################################################################
#  This program is part of the Barcelona OpenMP Tasks Suite                                  #
#  Copyright (C) 2009 Barcelona Supercomputing Center - Centro Nacional de Supercomputacion  #
#  Copyright (C) 2009 Universitat Politecnica de Catalunya                                   #
#                                                                                            #
#  This program is free software; you can redistribute it and/or modify                      #
#  it under the terms of the GNU General Public License as published by                      #
#  the Free Software Foundation; either version 2 of the License, or                         #
#  (at your option) any later version.                                                       #
#                                                                                            #
#  This program is distributed in the hope that it will be useful,                           #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of                            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                             #
#  GNU General Public License for more details.                                              #
#                                                                                            #
#  You should have received a copy of the GNU General Public License                         #
#  along with this program; if not, write to the Free Software                               #
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA            #
##############################################################################################

config_ready=$(wildcard $(BASE_DIR)/config/make.config)
ifeq ($(config_ready),)
   $(error Configure script not executed. Please run ./configure in the base directory)
endif

include $(BASE_DIR)/config/make.config

# Don't change below this line
##############################

#directories

BIN_DIR=$(BASE_DIR)/bin
COMMON_DIR=$(BASE_DIR)/common

TODAY := $(shell date "+%Y/%m/%d;%H:%M")

# Compile commands

OMPSSC_ALL_FLAGS=-c -I$(COMMON_DIR) $(OPT_FLAGS) $(OMPSSC_FLAGS) $(APP_FLAGS)
OMPC_ALL_FLAGS=-c -I$(COMMON_DIR) $(OPT_FLAGS) $(OMPC_FLAGS) $(APP_FLAGS)
OMPCXX_ALL_FLAGS=-c -I$(COMMON_DIR) $(OPT_FLAGS) $(OMPCXX_FLAGS) $(APP_FLAGS)
CC_ALL_FLAGS=-c -I$(COMMON_DIR) $(OPT_FLAGS) $(CC_FLAGS) $(APP_FLAGS)
CXX_ALL_FLAGS=-c -I$(COMMON_DIR) $(OPT_FLAGS) $(CXX_FLAGS) $(APP_FLAGS)

# Link commands

OMPSSLINK_ALL_FLAGS=$(OPT_FLAGS) $(OMPSSLINK_FLAGS) $(APP_FLAGS)
OMPLINK_ALL_FLAGS=$(OPT_FLAGS) $(OMPLINK_FLAGS) $(APP_FLAGS)
OMPCXXLINK_ALL_FLAGS=$(OPT_FLAGS) $(OMPCXXLINK_FLAGS) $(APP_FLAGS)
CLINK_ALL_FLAGS=$(OPT_FLAGS) $(CC_FLAGS) $(APP_FLAGS)
CXXLINK_ALL_FLAGS=$(OPT_FLAGS) $(CXX_FLAGS) $(APP_FLAGS)

# generic rules

ifndef PROGRAM
	PROGRAM = $(shell basename `pwd`)
endif

ifneq ( ,$(findstring _,$(PROGRAM)))
    SUB := $(shell echo $(PROGRAM) | cut -d _ -f 2)-
    PROGRAM := $(shell echo $(PROGRAM) | cut -d _ -f 1)
endif

ifndef PROGRAM_OBJS
	PROGRAM_OBJS = $(PROGRAM).o
endif

COMMON_OBJS = $(COMMON_DIR)/bots_common.o

ifeq ($(VERSION),common)
.c.o: Makefile $(COMMON_DIR)/Makefile.common
	$(CC) $(CC_ALL_FLAGS) -o $@ $<
ifeq ($(APAC),apac)
.cpp.o: Makefile $(COMMON_DIR)/Makefile.common
	$(CXX) $(CXX_ALL_FLAGS) -o $@ $<
endif
endif

ifeq ($(VERSION),serial)

TARGETS = $(BIN_DIR)/$(PROGRAM).$(LABEL).$(VERSION)

all: $(TARGETS)

.c.o: Makefile $(COMMON_DIR)/Makefile.common 
	$(CC) $(CC_ALL_FLAGS) -o $@ $<

INFO_FLAGS=-DCDATE="\"$(TODAY)\"" -DCC="\"$(CC)\"" -DLD="\"$(CLINK)\"" -DCMESSAGE="\"$(CMESSAGE)\"" \
	  -DLDFLAGS="\"$(CLINK_ALL_FLAGS) $(LIBS)\"" -DAPACFLAGS="\"$(APAC_ALL_FLAGS)\""

main.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(CC) $(CC_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS) -DCFLAGS="\"$(CC_ALL_FLAGS) -I.\""

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(VERSION): main.o $(PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(CLINK) $(CLINK_ALL_FLAGS) -o $@ main.o $(PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

endif

ifeq ($(VERSION),omp-apac)

COMMON_OBJS = $(COMMON_DIR)/bots_common_cxx.o

LIBCLANG := $(shell clang --version | head -n 1 | cut -d ' ' -f 3)
LIBCLANG := $(shell echo $$LIBRARY_PATH)/clang/$(LIBCLANG)/include

APAC_ALL_FLAGS = $(APAC_FLAGS) -I $(COMMON_DIR),$(LIBCLANG) --skip=$(SKIP) --main=$(MAIN)
PROFILING_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%.in_profiling.o)

TARGETS  = $(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION) 
TARGETS += $(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)_seq

ifdef CUTOFF_VERSIONS
	TARGETS += $(CUTOFF_VERSIONS:%=$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-%)
	
	COUNTERS_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-counters.o)
	MODEL_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-model.o)
	BOTH_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-both.o)
endif

all: $(TARGETS)

profiling: $(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)_profiling

.cpp.o: Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -o $@ $<

$(PROGRAM).in.o: $(PROGRAM).in.cpp Makefile $(COMMON_DIR)/Makefile.common
	$(CXX) $(CXX_ALL_FLAGS) -o $@ $<

$(PROGRAM).in_profiling.o: $(PROGRAM).in_profiling.cpp Makefile $(COMMON_DIR)/Makefile.common
	$(CXX) $(CXX_ALL_FLAGS) -o $@ $<

$(PROGRAM)-counters.o: $(PROGRAM)-counters.cpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -o $@ $<

$(PROGRAM)-model.o: $(PROGRAM)-model.cpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -o $@ $<

$(PROGRAM)-both.o: $(PROGRAM)-both.cpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -o $@ $<

$(PROGRAM).cpp: $(PROGRAM).in.cpp $(COMMON_DIR)/Makefile.common 
	$(APAC) $(APAC_ALL_FLAGS) -o $@ $<

$(PROGRAM)-counters.cpp: $(PROGRAM).in.cpp Makefile $(COMMON_DIR)/Makefile.common 
	$(APAC) $(APAC_ALL_FLAGS) --cutoff-count --cutoff-depth -o $@ $<

$(PROGRAM)-model.cpp: $(PROGRAM).in.cpp Makefile $(COMMON_DIR)/Makefile.common 
	$(APAC) $(APAC_ALL_FLAGS) --profile --run-with-custom="bash $(BASE_DIR)/run/run-$(PROGRAM).sh -c 1 -l $(CC) -v omp-apac_profiling" -o $@ $<

$(PROGRAM)-both.cpp: $(PROGRAM).in.cpp Makefile $(COMMON_DIR)/Makefile.common 
	$(APAC) $(APAC_ALL_FLAGS) --cutoff-count --cutoff-depth --profile --run-with-custom="bash $(BASE_DIR)/run/run-$(PROGRAM).sh -c 1 -l $(CC) -v omp-apac_profiling" -o $@ $<

INFO_FLAGS_OMP=-DCDATE="\"$(TODAY)\"" -DCC="\"$(OMPCXX)\"" -DLD="\"$(OMPCXXLINK)\"" -DCMESSAGE="\"$(CMESSAGE)\"" \
               -DLDFLAGS="\"$(OMPCXXLINK_ALL_FLAGS) $(LIBS)\"" -DCFLAGS="\"$(OMPCXX_ALL_FLAGS) -I.\"" -DAPACFLAGS="\"$(APAC_ALL_FLAGS)\""

INFO_FLAGS_CXX=-DCDATE="\"$(TODAY)\"" -DCC="\"$(CXX)\"" -DLD="\"$(CXXLINK)\"" -DCMESSAGE="\"$(CMESSAGE)\"" \
               -DLDFLAGS="\"$(CXXLINK_ALL_FLAGS) $(LIBS)\"" -DCFLAGS="\"$(CXX_ALL_FLAGS) -I.\""

main.o: $(COMMON_DIR)/bots_main_cxx.cpp app-desc.hpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP)

main_seq.o: $(COMMON_DIR)/bots_main_cxx.cpp app-desc.hpp Makefile $(COMMON_DIR)/Makefile.common
	$(CXX) $(CXX_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_CXX)

main_profiling.o: $(COMMON_DIR)/bots_main_cxx.cpp app-desc.hpp Makefile $(COMMON_DIR)/Makefile.common
	$(CXX) $(CXX_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_CXX) -DAPACFLAGS="\"$(APAC_ALL_FLAGS)\""

main-counters.o: $(COMMON_DIR)/bots_main_cxx.cpp app-desc.hpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP)

main-model.o: $(COMMON_DIR)/bots_main_cxx.cpp app-desc.hpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP)

main-both.o: $(COMMON_DIR)/bots_main_cxx.cpp app-desc.hpp Makefile $(COMMON_DIR)/Makefile.common
	$(OMPCXX) $(OMPCXX_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION): main.o $(PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(OTHER_OBJS) $(COMMON_OBJS)
	$(OMPCXXLINK) $(OMPCXXLINK_ALL_FLAGS) -o $@ main.o $(PROGRAM_OBJS) $(LIBS) $(OTHER_OBJS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)_seq: main_seq.o $(PROGRAM).in.o Makefile $(COMMON_DIR)/Makefile.common $(OTHER_OBJS) $(COMMON_OBJS)
	$(CXXLINK) $(CXXLINK_ALL_FLAGS) -o $@ main_seq.o $(PROGRAM).in.o $(LIBS) $(OTHER_OBJS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)_profiling: main_profiling.o $(PROFILING_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(OTHER_OBJS) $(COMMON_OBJS)
	$(CXXLINK) $(CXXLINK_ALL_FLAGS) -o $@ main_profiling.o $(PROFILING_PROGRAM_OBJS) $(LIBS) $(OTHER_OBJS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-counters: main-counters.o $(COUNTERS_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(OTHER_OBJS) $(COMMON_OBJS) 
	$(OMPCXXLINK) $(OMPCXXLINK_ALL_FLAGS) -o $@ main-counters.o $(COUNTERS_PROGRAM_OBJS) $(LIBS) $(OTHER_OBJS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-model: main-model.o $(MODEL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(OTHER_OBJS) $(COMMON_OBJS)
	$(OMPCXXLINK) $(OMPCXXLINK_ALL_FLAGS) -o $@ main-model.o $(MODEL_PROGRAM_OBJS) $(LIBS) $(OTHER_OBJS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-both: main-both.o $(BOTH_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(OTHER_OBJS) $(COMMON_OBJS)
	$(OMPCXXLINK) $(OMPCXXLINK_ALL_FLAGS) -o $@ main-both.o $(BOTH_PROGRAM_OBJS) $(LIBS) $(OTHER_OBJS) $(COMMON_OBJS)

endif

ifeq ($(VERSION),omp-tasks)

TARGETS = $(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)

ifdef CUTOFF_VERSIONS
	TARGETS += $(CUTOFF_VERSIONS:%=$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-%)

	MANUAL_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-manual.o)
	IF_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-if.o)
	FINAL_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-final.o)

	MANUAL_FLAGS = -DMANUAL_CUTOFF
	IF_FLAGS = -DIF_CUTOFF
	FINAL_FLAGS = -DFINAL_CUTOFF $(OMPC_FINAL_FLAGS)
endif

ifdef TIED_VERSIONS
	TIED_TARGETS := $(TARGETS:%=%-tied)
	TARGETS += $(TIED_TARGETS)

	TIED_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-tied.o)
	TIED_MANUAL_PROGRAM_OBJS := $(MANUAL_PROGRAM_OBJS:%.o=%-tied.o)
	TIED_IF_PROGRAM_OBJS := $(IF_PROGRAM_OBJS:%.o=%-tied.o)
	TIED_FINAL_PROGRAM_OBJS := $(FINAL_PROGRAM_OBJS:%.o=%-tied.o)

	TIED_FLAGS = -DFORCE_TIED_TASKS
endif


all: $(TARGETS)

.c.o: Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPC) $(OMPC_ALL_FLAGS) -o $@ $<

%-if.o: %.c Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPC) $(OMPC_ALL_FLAGS) $(IF_FLAGS) -o $@ $<

%-final.o: %.c Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPC) $(OMPC_ALL_FLAGS) $(FINAL_FLAGS) -o $@ $<

%-manual.o: %.c Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPC) $(OMPC_ALL_FLAGS) $(MANUAL_FLAGS) -o $@ $<

# we remove the untied clause with sed.
# For this to work it must be the first clause of the task directive
# Ugly... but there's no easy solutions because it is a pragma

%-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPC) $(OMPC_ALL_FLAGS) $(TIED_FLAGS) -o $@ tied-$<;\
	rm tied-$<

%-if-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPC) $(OMPC_ALL_FLAGS) $(IF_FLAGS) $(TIED_FLAGS) -o $@ $<;\
	rm tied-$<

%-manual-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPC) $(OMPC_ALL_FLAGS) $(MANUAL_FLAGS) $(TIED_FLAGS) -o $@ $<;\
	rm tied-$<

%-final-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPC) $(OMPC_ALL_FLAGS) $(FINAL_FLAGS) $(TIED_FLAGS) -o $@ $<;\
	rm tied-$<

INFO_FLAGS_OMP=-DCDATE="\"$(TODAY)\"" -DCC="\"$(OMPC)\"" -DLD="\"$(OMPLINK)\"" -DCMESSAGE="\"$(CMESSAGE)\"" \
               -DLDFLAGS="\"$(OMPLINK_ALL_FLAGS) $(LIBS)\"" -DAPACFLAGS="\"$(APAC_ALL_FLAGS)\""

main.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) -I.\""

main-if.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(IF_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(IF_FLAGS)-I.\""

main-final.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(FINAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(FINAL_FLAGS)-I.\""

main-manual.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(MANUAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(MANUAL_FLAGS) -I.\""

main-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(TIED_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(TIED_FLAGS) -I.\""

main-if-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(TIED_FLAGS) $(IF_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(TIED_FLAGS) $(IF_FLAGS) -I.\""

main-manual-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(TIED_FLAGS) $(MANUAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(TIED_FLAGS) $(MANUAL_FLAGS) -I.\""

main-final-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPC) $(OMPC_ALL_FLAGS) $(TIED_FLAGS) $(FINAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMP) -DCFLAGS="\"$(OMPC_ALL_FLAGS) $(TIED_FLAGS) $(FINAL_FLAGS) -I.\""

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION): main.o $(PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main.o $(PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-manual: main-manual.o $(MANUAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-manual.o $(MANUAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-if_clause: main-if.o $(IF_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS) 
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-if.o $(IF_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-tied: main-tied.o $(TIED_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-tied.o $(TIED_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-manual-tied: main-manual-tied.o $(TIED_MANUAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-manual-tied.o $(TIED_MANUAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-if_clause-tied: main-if-tied.o $(TIED_IF_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-if-tied.o $(TIED_IF_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

ifdef USE_FINAL_CLAUSE

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final: main-final.o $(FINAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS) 
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-final.o $(FINAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final-tied: main-final-tied.o $(TIED_FINAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPLINK) $(OMPLINK_ALL_FLAGS) -o $@ main-final-tied.o $(TIED_FINAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

else

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final: 
$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final-tied: 

endif

endif

#ifeq ( $(shell [[ $(VERSION) == ompss && $(OMPSSC) == mcc  ]] && echo true ), true )
ifeq ($(VERSION),ompss)
ifeq ($(ENABLE_OMPSS),yes)

TARGETS = $(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)

ifdef CUTOFF_VERSIONS
	TARGETS += $(CUTOFF_VERSIONS:%=$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-%)

	MANUAL_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-manual.o)
	IF_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-if.o)
	FINAL_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-final.o)

	MANUAL_FLAGS = -DMANUAL_CUTOFF
	IF_FLAGS = -DIF_CUTOFF
	FINAL_FLAGS = -DFINAL_CUTOFF $(OMPSSC_FINAL_FLAGS)
endif

ifdef TIED_VERSIONS
	TIED_TARGETS := $(TARGETS:%=%-tied)
	TARGETS += $(TIED_TARGETS)

	TIED_PROGRAM_OBJS := $(PROGRAM_OBJS:%.o=%-tied.o)
	TIED_MANUAL_PROGRAM_OBJS := $(MANUAL_PROGRAM_OBJS:%.o=%-tied.o)
	TIED_IF_PROGRAM_OBJS := $(IF_PROGRAM_OBJS:%.o=%-tied.o)
	TIED_FINAL_PROGRAM_OBJS := $(FINAL_PROGRAM_OBJS:%.o=%-tied.o)

	TIED_FLAGS = -DFORCE_TIED_TASKS
endif


all: $(TARGETS)

.c.o: Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) -o $@ $<

%-if.o: %.c Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(IF_FLAGS) -o $@ $<

%-final.o: %.c Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(FINAL_FLAGS) -o $@ $<

%-manual.o: %.c Makefile $(COMMON_DIR)/Makefile.common 
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(MANUAL_FLAGS) -o $@ $<

# we remove the untied clause with sed.
# For this to work it must be the first clause of the task directive
# Ugly... but there's no easy solutions because it is a pragma

%-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) -o $@ tied-$<;\
	rm tied-$<

%-if-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(IF_FLAGS) $(TIED_FLAGS) -o $@ $<;\
	rm tied-$<

%-manual-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(MANUAL_FLAGS) $(TIED_FLAGS) -o $@ $<;\
	rm tied-$<

%-final-tied.o: %.c Makefile $(COMMON_DIR)/Makefile.common
	cat $< | sed -e "s/task \{1,\}untied/task/g" > tied-$< ;\
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(FINAL_FLAGS) $(TIED_FLAGS) -o $@ $<;\
	rm tied-$<

INFO_FLAGS_OMPSS=-DCDATE="\"$(TODAY)\"" -DCC="\"$(OMPSSC)\"" -DLD="\"$(OMPSSLINK)\"" -DCMESSAGE="\"$(CMESSAGE)\"" \
               -DLDFLAGS="\"$(OMPSSLINK_ALL_FLAGS) $(LIBS)\"" -DAPACFLAGS="\"$(APAC_ALL_FLAGS)\""

main.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) -I.\""

main-if.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(IF_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(IF_FLAGS)-I.\""

main-final.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(FINAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(FINAL_FLAGS)-I.\""

main-manual.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(MANUAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(MANUAL_FLAGS) -I.\""

main-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) -I.\""

main-if-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) $(IF_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) $(IF_FLAGS) -I.\""

main-manual-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) $(MANUAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) $(MANUAL_FLAGS) -I.\""

main-final-tied.o: $(COMMON_DIR)/bots_main.c app-desc.h Makefile $(COMMON_DIR)/Makefile.common
	$(OMPSSC) $(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) $(FINAL_FLAGS) -I. -o $@ $< $(INFO_FLAGS_OMPSS) -DCFLAGS="\"$(OMPSSC_ALL_FLAGS) $(TIED_FLAGS) $(FINAL_FLAGS) -I.\""

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION): main.o $(PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main.o $(PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-manual: main-manual.o $(MANUAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-manual.o $(MANUAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-if_clause: main-if.o $(IF_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS) 
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-if.o $(IF_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-tied: main-tied.o $(TIED_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-tied.o $(TIED_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-manual-tied: main-manual-tied.o $(TIED_MANUAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-manual-tied.o $(TIED_MANUAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-if_clause-tied: main-if-tied.o $(TIED_IF_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-if-tied.o $(TIED_IF_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

ifdef USE_FINAL_CLAUSE

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final: main-final.o $(FINAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS) 
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-final.o $(FINAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final-tied: main-final-tied.o $(TIED_FINAL_PROGRAM_OBJS) Makefile $(COMMON_DIR)/Makefile.common $(COMMON_OBJS)
	$(OMPSSLINK) $(OMPSSLINK_ALL_FLAGS) -o $@ main-if-tied.o $(TIED_FINAL_PROGRAM_OBJS) $(LIBS) $(COMMON_OBJS)

else

$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final: 
$(BIN_DIR)/$(PROGRAM).$(LABEL).$(SUB)$(VERSION)-final-tied: 

endif

endif
endif

ifeq ($(VERSION),omp-apac)
clean:
	rm -fr $(PROGRAM).cpp $(PROGRAM)-counters.cpp $(PROGRAM)-model.cpp $(PROGRAM)-both.cpp *.o *.log apac_profiling.hpp *.in_profiling.cpp *.profile *.model
else
clean:
	rm -fr *.o
endif

dist-clean: clean

